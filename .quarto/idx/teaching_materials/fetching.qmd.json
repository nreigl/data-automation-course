{"title":"Fetching and Visualizing Official Statistics with R","markdown":{"yaml":{"title":"Fetching and Visualizing Official Statistics with R","author":"Nicolas","date":"2025-04-17","institute":"Eesti Pank","format":{"revealjs":{"output-file":"presentation_for_distribution_fetching.html","encoding":"UTF-8","incremental":true,"preview-links":true,"scroll-view":false,"theme":"simple","smaller":true,"slide-number":true,"font-size":"0.6em","transition":"slide","toc":true,"toc-depth":2,"chalkboard":false,"embed-resources":false}},"editor_options":{"chunk_output_type":"console"}},"headingText":"Interfaces to Official Statistics","containsRefs":false,"markdown":"\n\n\n- Packages or set of classes and methods to read data and metadata documents through exchange frameworks\n  - Use [R](https://www.r-project.org/) (or [Python](https://www.python.org/)) packages to read data from APIs, databases, and web pages\n    - Individual packages:\n      - [eurostat](https://cran.r-project.org/package=eurostat): Access data from Eurostat\n      - [OECD](https://cran.r-project.org/package=OECD): Access data from the OECD API\n  - General-purpose packages:\n    - [rdbnomics](https://cran.r-project.org/package=rdbnomics): Unified access to many economic databases (e.g. ECB, **Eurostat**, IMF, World Bank)\n\n---\n  \n  - Interface standards:\n    - [SDMX](https://sdmx.org/?page_id=5008): Statistical Data and Metadata Exchange format\n    - [pxweb](https://cran.r-project.org/package=pxweb): Access to data sources using the PX-Web API (e.g. Statistics Sweden, Statistics Estonia)\n\n---\n\n###  DBnomics \n\n - [DBnomics](https://db.nomics.world/) is a database of databases\n    - free platform to aggregate publicly-available economic data provided by national and international statistical institutions, but also by researchers and private companies\n    - Unified interface to access data from many sources\n    - Harmonized data formats and metadata \n    - Data series are available upon release by the provider \n    - Each revision is archived to build a real-time database\n\n## How to fetch data (from DBnomics using R) \n\n- DBnomics R client\n \n::: {.fragment}\n \n```{r}\n#| eval: false\n#| echo: true\ninstall.packages(\"rdbnomics\")\nlibrary(rdbnomics)\n```\n\n:::\n\n---\n\n### Packages used in this tutorial\n\n\n  - üì¶ Fetching data (`rdbnomics`)\n  - üßπ Data wrangling and transformation (`tidyverse`)\n  - üìä Visualization (`ggplot2`, `plotly`)\n  - üìã Tabular summaries (`gt`)\n  - üßæ Building this presentation (`quarto`)\n\n::: {.fragment}\n\n```{r}\nlibrary(quarto)     # for compiling Quarto presentations\nlibrary(rdbnomics)  # for accessing economic data via DBnomics\nlibrary(tidyverse)  # dplyr, ggplot2, readr, etc.\nlibrary(plotly)     # interactive visualizations\nlibrary(gt)         # pretty tables\n```\n\n:::\n\n---\n\n### Example: Fetch Unemployment Data \n\n   - Assume we know exactly the series ID we want to fetch\n     - Unemployment rate, ILO definition, total, Estonia, from Eurostat\n\n::: {.fragment}\n\n```{r}\nunemp <- rdb(ids = \"Eurostat/ei_lmhr_m/M.PC_ACT.SA.LM-UN-T-TOT.EE\") # fetch data\n```\n\n:::\n\n--- \n\n\n```{r}\nglimpse(unemp)\ncolnames(unemp)\n```\n\n---\n\n```{r}\n# Extract source and series ID from the metadata\n(source_name <- unique(unemp$dataset_code))  \n(provider_code <- unique(unemp$provider_code))  \n(country_name <- unique(unemp$`Geopolitical entity (reporting)`)  )\n(series_id <- unique(unemp$series_code))  \n```\n\n--- \n\n```{r}\n#| echo: true\n#| output-location: slide\n# Plot the data\np1 <- ggplot(unemp, aes(x = period, y = value)) +\n  geom_line(color = \"steelblue\", linewidth = 1) +\n  labs(\n    title = paste(\"Unemployment Rate in \", country_name),\n    subtitle = paste(\"Monthly, seasonally adjusted ‚Äî\", provider_code),\n    x = \"Date\", y = \"Percent\",\n    caption = paste(\"Source:\", provider_code, \"| Dataset:\", source_name, \"| ID:\", series_id)\n  ) +\n  theme_minimal()\np1\n```\n\n---\n\n### Interactive plot\n\n```{r}\nggplotly(p1)\n```\n\n\n---\n\n### How do we find the series ID/mask/dimensions?\n\n- Go to the [DBnomics website](https://db.nomics.world/)\n  - Search directly for a series or pick a provider\n  - Search for the [data](https://db.nomics.world/Eurostat/ei_lmhr_m?tab=list) you want (dataset_code)\n  - Click on the [series](https://db.nomics.world/Eurostat/ei_lmhr_m/M.PC_ACT.SA.LM-UN-T-TOT.EE) (series_code) \n  - Copy the series ID from the URL  \n\n---\n\n- Show the available datasets of a provider:\n\n::: {.fragment}\n\n\n```{r}\nhead(rdb_datasets(provider_code = \"Eurostat\"))\n```\n\n:::\n\n---\n\n- Show the dimensions of a dataset:\n\n::: {.fragment}\n\n\n```{r}\nhead(rdb_dimensions(provider_code = \"Eurostat\", dataset_code = \"ei_lmhr_m\"))\n```\n\n:::\n\n---\n\n\n - Query to filter/select series from a provider's dataset\n\n::: {.fragment}\n\n```{r}\n#| cache: true\nhead(rdb_series(\n  provider = \"Eurostat\",\n  dataset_code = \"ei_lmhr_m\",\n  query = \"United Kingdom\"\n))\n```\n\n:::\n\n\n## Fetch two (or more) series at once\n\n - Example: Balance of Payments (BOP) for France and Germany from the [IMF](https://db.nomics.world/IMF/BOP?tab=list) for Current Account, Total, Net, Euros, Millions, Annual\n\n\n::: {.fragment}\n\n::: {.panel-tabset}\n\n### Option A\n\n\n```{r}\n# by ID\nbop <- rdb(ids = c(\"IMF/BOP/A.FR.BCA_BP6_EUR\", \"IMF/BOP/A.DE.BCA_BP6_EUR\"))\nbop %>% count(`Reference Area`)\n```\n\n\n### Option B: \n\n```{r}\n# by Mask\nbop <- rdb(provider = \"IMF\",\n           dataset_code =  \"BOP\",\n           mask = \"A.FR+DE.BCA_BP6_EUR\")\nbop %>% count(`Reference Area`)\n```\n\n\n### Option C: \n\n \n\n<span style=\"color:red; font-weight:bold;\">‚ö†Ô∏èYou must specify all dimensions!</span>\n\n\n```{r}\n# by Dimension\ndim <- list(\n  REF_AREA = c(\"DE\", \"FR\"),\n  INDICATOR = c(\"BCA_BP6_EUR\"),\n  FREQ = \"A\"\n)\nbop <- rdb(provider = \"IMF\", dataset_code = \"BOP\", dimensions = dim)\nbop %>% count(`Reference Area`)\n```\n\n\n:::\n\n:::\n\n---\n\n\n\n```{r}\n#| echo: true\n#| output-location: slide\n# Line plot with color by country\np2 <- ggplot(bop, aes(x = period, y = value, color = `Reference Area`)) +\n  geom_step(linewidth = 1) +\n  labs(\n    title = \"Balance of Payments (BCA, EUR)\",\n    subtitle = \"France vs Germany ‚Äî Annual\",\n    x = \"Year\",\n    y = \"EUR (Millions)\",\n    caption = \"Source: IMF / DBnomics\"\n  ) +\n  theme_minimal()\np2\n```\n\n## Fetch two series from different datasets of different providers \n\n```{r}\nunemp2 <- rdb(ids = c(\"AMECO/ZUTN/EA19.1.0.0.0.ZUTN\", \"Eurostat/une_rt_q/Q.SA.Y15-24.PC_ACT.T.EA19\"))\n```\n\n```{r}\n# See which providers and datasets are included\ndim(unemp2)\nunique(unemp2$provider_code)\nunique(unemp2$dataset_code)\nunique(unemp2$series_code)\nunique(unemp2$`@frequency`)\nunique(unemp2$`Seasonal adjustment`)\n```\n\n---\n\n```{r}\n# Summarize coverage and data availability\nunemp2_summary <- unemp2 %>%\n  group_by(series_code) %>%\n  summarize(\n    provider = first(provider_code),\n    dataset = first(dataset_code),\n    start_all = min(period, na.rm = TRUE),\n    end_all = max(period, na.rm = TRUE),\n    start_data = min(period[!is.na(value)]),\n    end_data = max(period[!is.na(value)]),\n    n_obs = sum(!is.na(value)),\n    .groups = \"drop\"\n  )\n\n```\n\n\n---\n\n```{r}\nunemp2_summary_table <- unemp2_summary |> \ngt() %>%\n  tab_header(\n    title = \"Time Coverage and Non-Missing Observations\",\n    subtitle = \"For Each Series from AMECO and Eurostat\"\n  ) %>%\n  cols_label(\n    series_code = \"Series ID\",\n    provider = \"Provider\",\n    dataset = \"Dataset\",\n    start_all = \"Start (all)\",\n    end_all = \"End (all)\",\n    start_data = \"Start (non-NA)\",\n    end_data = \"End (non-NA)\",\n    n_obs = \"# Obs\"\n  ) %>%\n  fmt_date(\n    columns = c(start_all, end_all, start_data, end_data),\n    date_style = \"iso\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    column_labels.font.weight = \"bold\"\n  )\n```\n\n---\n\n```{r}\nunemp2_summary_table\n```\n\n----\n\n```{r}\n# Metadata vectors\nproviders <- unique(unemp2$provider_code)\ndatasets <- unique(unemp2$dataset_code)\nseries_ids <- unique(unemp2$series_code)\n```\n\n```{r}\n# Create a label that combines dataset + series ID\nunemp2_clean <- unemp2 %>%\n  drop_na(value) %>%\n  mutate(label = case_when(\n    series_code == \"EA19.1.0.0.0.ZUTN\" ~ \"Total, AMECO\",\n    series_code == \"Q.SA.Y15-24.PC_ACT.T.EA19\" ~ \"Youth (15‚Äì24), Eurostat\",\n    TRUE ~ series_code\n  ))\n```\n\n\n--- \n\n```{r}\n#| echo: true\n#| output-location: slide\np3 <- ggplot(unemp2_clean, aes(x = period, y = value, color = label)) +\n  geom_line(linewidth = 1) +\n  labs(\n    title = \"Unemployment Rates from Multiple Sources (EA19)\",\n    subtitle = \"AMECO and Eurostat ‚Äî Different definitions\",\n    x = \"Year\", y = \"Percent\",\n    caption = paste(\"Series IDs:\", paste(unique(unemp2_clean$series_code), collapse = \" | \"))\n  ) +\n  theme_minimal()\np3\n```\n\n## Fetch large amounts of data \n\n - Sometimes you need to fetch many if not all dimensions of the data\n - You can wildcard dimension and post-filter\n - Example: MFI Interest Rate Statistics from the ECB\n    - Start with a [single series](https://db.nomics.world/ECB/MIR/M.EE.B.A2C.A.R.A.2250.EUR.N) (Estonia, mortgage rates)\n \n::: {.fragment}\n\n```{r}\nmir_mortgage_ee <- rdb(\"ECB\", \"MIR\", \"M.EE.B.A2C.A.R.A.2250.EUR.N\")\nunique(mir_mortgage_ee$series_name)\n```\n\n:::\n\n---\n\n### Wildcarding dimensions\n\n  - To fetch **multiple values** for a dimension (e.g. countries), just **remove** the value from that position \n    - Example: remove `\"EE\"` to fetch all countries (`REF_AREA`)\n\n::: {.fragment}\n\n<span style=\"color:red;\">‚ö†Ô∏è This can take a while</span>\n\n```{r}\n#| cache: true\n# mir_mortgage_ee <- rdb(\"ECB\", \"MIR\", \"M.EE.B.A2C.A.R.A.2250.EUR.N\")\nmir <- rdb(\"ECB\", \"MIR\", \"M..B..A.R.A..EUR.N\")\nunique(mir$REF_AREA)\nunique(mir$BS_ITEM)\nunique(mir$`BS counterpart sector`)\n```\n\n:::\n \n---\n\n### Filter and plot \n\n- Filter Estonia, Latvia and Lithuania\n- Keep only selected **BS items** (loan categories)  \n\n::: {.fragment}\n\n```{r}\n# Filter by BS_ITEM and countries\nmir_filtered <- mir %>%\n  filter(\n    REF_AREA %in% c(\"EE\", \"LV\", \"LT\"),\n    BS_ITEM %in% c(\"A2I\", \"A2C\", \"A2B\", \"A2J\", \"A2A\")\n  )\n```\n\n:::\n\n---\n\n### Plot interest rates by country & type\n\n::: {.fragment}\n\n\n```{r}\n#| echo: true\n#| output-location: slide\ncountry_list <- paste(sort(unique(mir_filtered$REF_AREA)), collapse = \", \")\nitem_list <- paste(unique(mir_filtered$BS_ITEM), collapse = \", \")\n\ncaption_text <- paste(\n  \"Source: ECB / DBnomics ‚Äî Dataset code: MIR\",\n  paste0(\"\\nFiltered: REF_AREA in \", country_list, \"; BS_ITEM in \", item_list)\n)\n\nmir_filtered <- mir_filtered %>%\n  mutate(facet_label = paste0(`BS counterpart sector`, \".\\n\\n\", `Balance sheet item`))\n\np4 <- ggplot(mir_filtered, aes(x = period, y = value, color = REF_AREA)) +\n  geom_line(linewidth = 0.8) +\n  facet_wrap(~ facet_label, labeller = label_wrap_gen(width = 30), ncol = 3) +\n  labs(\n    title = \"Interest Rates for Households and Firms\",\n    subtitle = \"Faceted by Loan Type and Borrower Sector\",\n    x = \"Date\", y = \"Percent\",\n    caption = caption_text\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\np4\n```\n\n:::\n\n---\n\n","srcMarkdownNoYaml":"\n\n# Interfaces to Official Statistics\n\n- Packages or set of classes and methods to read data and metadata documents through exchange frameworks\n  - Use [R](https://www.r-project.org/) (or [Python](https://www.python.org/)) packages to read data from APIs, databases, and web pages\n    - Individual packages:\n      - [eurostat](https://cran.r-project.org/package=eurostat): Access data from Eurostat\n      - [OECD](https://cran.r-project.org/package=OECD): Access data from the OECD API\n  - General-purpose packages:\n    - [rdbnomics](https://cran.r-project.org/package=rdbnomics): Unified access to many economic databases (e.g. ECB, **Eurostat**, IMF, World Bank)\n\n---\n  \n  - Interface standards:\n    - [SDMX](https://sdmx.org/?page_id=5008): Statistical Data and Metadata Exchange format\n    - [pxweb](https://cran.r-project.org/package=pxweb): Access to data sources using the PX-Web API (e.g. Statistics Sweden, Statistics Estonia)\n\n---\n\n###  DBnomics \n\n - [DBnomics](https://db.nomics.world/) is a database of databases\n    - free platform to aggregate publicly-available economic data provided by national and international statistical institutions, but also by researchers and private companies\n    - Unified interface to access data from many sources\n    - Harmonized data formats and metadata \n    - Data series are available upon release by the provider \n    - Each revision is archived to build a real-time database\n\n## How to fetch data (from DBnomics using R) \n\n- DBnomics R client\n \n::: {.fragment}\n \n```{r}\n#| eval: false\n#| echo: true\ninstall.packages(\"rdbnomics\")\nlibrary(rdbnomics)\n```\n\n:::\n\n---\n\n### Packages used in this tutorial\n\n\n  - üì¶ Fetching data (`rdbnomics`)\n  - üßπ Data wrangling and transformation (`tidyverse`)\n  - üìä Visualization (`ggplot2`, `plotly`)\n  - üìã Tabular summaries (`gt`)\n  - üßæ Building this presentation (`quarto`)\n\n::: {.fragment}\n\n```{r}\nlibrary(quarto)     # for compiling Quarto presentations\nlibrary(rdbnomics)  # for accessing economic data via DBnomics\nlibrary(tidyverse)  # dplyr, ggplot2, readr, etc.\nlibrary(plotly)     # interactive visualizations\nlibrary(gt)         # pretty tables\n```\n\n:::\n\n---\n\n### Example: Fetch Unemployment Data \n\n   - Assume we know exactly the series ID we want to fetch\n     - Unemployment rate, ILO definition, total, Estonia, from Eurostat\n\n::: {.fragment}\n\n```{r}\nunemp <- rdb(ids = \"Eurostat/ei_lmhr_m/M.PC_ACT.SA.LM-UN-T-TOT.EE\") # fetch data\n```\n\n:::\n\n--- \n\n\n```{r}\nglimpse(unemp)\ncolnames(unemp)\n```\n\n---\n\n```{r}\n# Extract source and series ID from the metadata\n(source_name <- unique(unemp$dataset_code))  \n(provider_code <- unique(unemp$provider_code))  \n(country_name <- unique(unemp$`Geopolitical entity (reporting)`)  )\n(series_id <- unique(unemp$series_code))  \n```\n\n--- \n\n```{r}\n#| echo: true\n#| output-location: slide\n# Plot the data\np1 <- ggplot(unemp, aes(x = period, y = value)) +\n  geom_line(color = \"steelblue\", linewidth = 1) +\n  labs(\n    title = paste(\"Unemployment Rate in \", country_name),\n    subtitle = paste(\"Monthly, seasonally adjusted ‚Äî\", provider_code),\n    x = \"Date\", y = \"Percent\",\n    caption = paste(\"Source:\", provider_code, \"| Dataset:\", source_name, \"| ID:\", series_id)\n  ) +\n  theme_minimal()\np1\n```\n\n---\n\n### Interactive plot\n\n```{r}\nggplotly(p1)\n```\n\n\n---\n\n### How do we find the series ID/mask/dimensions?\n\n- Go to the [DBnomics website](https://db.nomics.world/)\n  - Search directly for a series or pick a provider\n  - Search for the [data](https://db.nomics.world/Eurostat/ei_lmhr_m?tab=list) you want (dataset_code)\n  - Click on the [series](https://db.nomics.world/Eurostat/ei_lmhr_m/M.PC_ACT.SA.LM-UN-T-TOT.EE) (series_code) \n  - Copy the series ID from the URL  \n\n---\n\n- Show the available datasets of a provider:\n\n::: {.fragment}\n\n\n```{r}\nhead(rdb_datasets(provider_code = \"Eurostat\"))\n```\n\n:::\n\n---\n\n- Show the dimensions of a dataset:\n\n::: {.fragment}\n\n\n```{r}\nhead(rdb_dimensions(provider_code = \"Eurostat\", dataset_code = \"ei_lmhr_m\"))\n```\n\n:::\n\n---\n\n\n - Query to filter/select series from a provider's dataset\n\n::: {.fragment}\n\n```{r}\n#| cache: true\nhead(rdb_series(\n  provider = \"Eurostat\",\n  dataset_code = \"ei_lmhr_m\",\n  query = \"United Kingdom\"\n))\n```\n\n:::\n\n\n## Fetch two (or more) series at once\n\n - Example: Balance of Payments (BOP) for France and Germany from the [IMF](https://db.nomics.world/IMF/BOP?tab=list) for Current Account, Total, Net, Euros, Millions, Annual\n\n\n::: {.fragment}\n\n::: {.panel-tabset}\n\n### Option A\n\n\n```{r}\n# by ID\nbop <- rdb(ids = c(\"IMF/BOP/A.FR.BCA_BP6_EUR\", \"IMF/BOP/A.DE.BCA_BP6_EUR\"))\nbop %>% count(`Reference Area`)\n```\n\n\n### Option B: \n\n```{r}\n# by Mask\nbop <- rdb(provider = \"IMF\",\n           dataset_code =  \"BOP\",\n           mask = \"A.FR+DE.BCA_BP6_EUR\")\nbop %>% count(`Reference Area`)\n```\n\n\n### Option C: \n\n \n\n<span style=\"color:red; font-weight:bold;\">‚ö†Ô∏èYou must specify all dimensions!</span>\n\n\n```{r}\n# by Dimension\ndim <- list(\n  REF_AREA = c(\"DE\", \"FR\"),\n  INDICATOR = c(\"BCA_BP6_EUR\"),\n  FREQ = \"A\"\n)\nbop <- rdb(provider = \"IMF\", dataset_code = \"BOP\", dimensions = dim)\nbop %>% count(`Reference Area`)\n```\n\n\n:::\n\n:::\n\n---\n\n\n\n```{r}\n#| echo: true\n#| output-location: slide\n# Line plot with color by country\np2 <- ggplot(bop, aes(x = period, y = value, color = `Reference Area`)) +\n  geom_step(linewidth = 1) +\n  labs(\n    title = \"Balance of Payments (BCA, EUR)\",\n    subtitle = \"France vs Germany ‚Äî Annual\",\n    x = \"Year\",\n    y = \"EUR (Millions)\",\n    caption = \"Source: IMF / DBnomics\"\n  ) +\n  theme_minimal()\np2\n```\n\n## Fetch two series from different datasets of different providers \n\n```{r}\nunemp2 <- rdb(ids = c(\"AMECO/ZUTN/EA19.1.0.0.0.ZUTN\", \"Eurostat/une_rt_q/Q.SA.Y15-24.PC_ACT.T.EA19\"))\n```\n\n```{r}\n# See which providers and datasets are included\ndim(unemp2)\nunique(unemp2$provider_code)\nunique(unemp2$dataset_code)\nunique(unemp2$series_code)\nunique(unemp2$`@frequency`)\nunique(unemp2$`Seasonal adjustment`)\n```\n\n---\n\n```{r}\n# Summarize coverage and data availability\nunemp2_summary <- unemp2 %>%\n  group_by(series_code) %>%\n  summarize(\n    provider = first(provider_code),\n    dataset = first(dataset_code),\n    start_all = min(period, na.rm = TRUE),\n    end_all = max(period, na.rm = TRUE),\n    start_data = min(period[!is.na(value)]),\n    end_data = max(period[!is.na(value)]),\n    n_obs = sum(!is.na(value)),\n    .groups = \"drop\"\n  )\n\n```\n\n\n---\n\n```{r}\nunemp2_summary_table <- unemp2_summary |> \ngt() %>%\n  tab_header(\n    title = \"Time Coverage and Non-Missing Observations\",\n    subtitle = \"For Each Series from AMECO and Eurostat\"\n  ) %>%\n  cols_label(\n    series_code = \"Series ID\",\n    provider = \"Provider\",\n    dataset = \"Dataset\",\n    start_all = \"Start (all)\",\n    end_all = \"End (all)\",\n    start_data = \"Start (non-NA)\",\n    end_data = \"End (non-NA)\",\n    n_obs = \"# Obs\"\n  ) %>%\n  fmt_date(\n    columns = c(start_all, end_all, start_data, end_data),\n    date_style = \"iso\"\n  ) %>%\n  tab_options(\n    table.width = pct(100),\n    column_labels.font.weight = \"bold\"\n  )\n```\n\n---\n\n```{r}\nunemp2_summary_table\n```\n\n----\n\n```{r}\n# Metadata vectors\nproviders <- unique(unemp2$provider_code)\ndatasets <- unique(unemp2$dataset_code)\nseries_ids <- unique(unemp2$series_code)\n```\n\n```{r}\n# Create a label that combines dataset + series ID\nunemp2_clean <- unemp2 %>%\n  drop_na(value) %>%\n  mutate(label = case_when(\n    series_code == \"EA19.1.0.0.0.ZUTN\" ~ \"Total, AMECO\",\n    series_code == \"Q.SA.Y15-24.PC_ACT.T.EA19\" ~ \"Youth (15‚Äì24), Eurostat\",\n    TRUE ~ series_code\n  ))\n```\n\n\n--- \n\n```{r}\n#| echo: true\n#| output-location: slide\np3 <- ggplot(unemp2_clean, aes(x = period, y = value, color = label)) +\n  geom_line(linewidth = 1) +\n  labs(\n    title = \"Unemployment Rates from Multiple Sources (EA19)\",\n    subtitle = \"AMECO and Eurostat ‚Äî Different definitions\",\n    x = \"Year\", y = \"Percent\",\n    caption = paste(\"Series IDs:\", paste(unique(unemp2_clean$series_code), collapse = \" | \"))\n  ) +\n  theme_minimal()\np3\n```\n\n## Fetch large amounts of data \n\n - Sometimes you need to fetch many if not all dimensions of the data\n - You can wildcard dimension and post-filter\n - Example: MFI Interest Rate Statistics from the ECB\n    - Start with a [single series](https://db.nomics.world/ECB/MIR/M.EE.B.A2C.A.R.A.2250.EUR.N) (Estonia, mortgage rates)\n \n::: {.fragment}\n\n```{r}\nmir_mortgage_ee <- rdb(\"ECB\", \"MIR\", \"M.EE.B.A2C.A.R.A.2250.EUR.N\")\nunique(mir_mortgage_ee$series_name)\n```\n\n:::\n\n---\n\n### Wildcarding dimensions\n\n  - To fetch **multiple values** for a dimension (e.g. countries), just **remove** the value from that position \n    - Example: remove `\"EE\"` to fetch all countries (`REF_AREA`)\n\n::: {.fragment}\n\n<span style=\"color:red;\">‚ö†Ô∏è This can take a while</span>\n\n```{r}\n#| cache: true\n# mir_mortgage_ee <- rdb(\"ECB\", \"MIR\", \"M.EE.B.A2C.A.R.A.2250.EUR.N\")\nmir <- rdb(\"ECB\", \"MIR\", \"M..B..A.R.A..EUR.N\")\nunique(mir$REF_AREA)\nunique(mir$BS_ITEM)\nunique(mir$`BS counterpart sector`)\n```\n\n:::\n \n---\n\n### Filter and plot \n\n- Filter Estonia, Latvia and Lithuania\n- Keep only selected **BS items** (loan categories)  \n\n::: {.fragment}\n\n```{r}\n# Filter by BS_ITEM and countries\nmir_filtered <- mir %>%\n  filter(\n    REF_AREA %in% c(\"EE\", \"LV\", \"LT\"),\n    BS_ITEM %in% c(\"A2I\", \"A2C\", \"A2B\", \"A2J\", \"A2A\")\n  )\n```\n\n:::\n\n---\n\n### Plot interest rates by country & type\n\n::: {.fragment}\n\n\n```{r}\n#| echo: true\n#| output-location: slide\ncountry_list <- paste(sort(unique(mir_filtered$REF_AREA)), collapse = \", \")\nitem_list <- paste(unique(mir_filtered$BS_ITEM), collapse = \", \")\n\ncaption_text <- paste(\n  \"Source: ECB / DBnomics ‚Äî Dataset code: MIR\",\n  paste0(\"\\nFiltered: REF_AREA in \", country_list, \"; BS_ITEM in \", item_list)\n)\n\nmir_filtered <- mir_filtered %>%\n  mutate(facet_label = paste0(`BS counterpart sector`, \".\\n\\n\", `Balance sheet item`))\n\np4 <- ggplot(mir_filtered, aes(x = period, y = value, color = REF_AREA)) +\n  geom_line(linewidth = 0.8) +\n  facet_wrap(~ facet_label, labeller = label_wrap_gen(width = 30), ncol = 3) +\n  labs(\n    title = \"Interest Rates for Households and Firms\",\n    subtitle = \"Faceted by Loan Type and Borrower Sector\",\n    x = \"Date\", y = \"Percent\",\n    caption = caption_text\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\np4\n```\n\n:::\n\n---\n\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"toc":true,"output-file":"presentation_for_distribution_fetching.html","toc-depth":2,"embed-resources":false},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.18","auto-stretch":true,"theme":"simple","transition":"slide","slideNumber":true,"title":"Fetching and Visualizing Official Statistics with R","author":"Nicolas","date":"2025-04-17","institute":"Eesti Pank","editor_options":{"chunk_output_type":"console"},"encoding":"UTF-8","previewLinks":true,"smaller":true,"font-size":"0.6em","chalkboard":false}}},"projectFormats":["revealjs"]}